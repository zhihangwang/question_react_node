{"version":3,"sources":["../service/service.js"],"names":["db","sourceMapSupport","install","app","use","express","static","bodyParser","json","get","req","res","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","_records","catch","status","message","err","post","newIssue","body","valid","Issue","validateIssue","insertOne","_id","result","insertedId","MongoClient","connect","useNewUrlParser","connection","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAIA,WAAJ;;AAEAC,2BAAiBC,OAAjB;;AAKA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEAL,IAAIM,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCX,OAAGY,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8C,kBAAU;AACpD,YAAMC,WAAW;AACbC,yBAAaC,OAAOC;AADP,SAAjB;AAGAR,YAAIH,IAAJ,CAAS;AACLY,uBAAWJ,QADN;AAELK,sBAAUH;AAFL,SAAT;AAIH,KARD,EAQGI,KARH,CAQS,eAAO;AACZX,YAAIY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AACjBgB,iDAAmCC;AADlB,SAArB;AAGH,KAZD;AAaH,CAdD;;AAgBAtB,IAAIuB,IAAJ,CAAS,aAAT,EAAwB,UAAChB,GAAD,EAAMC,GAAN,EAAc;AAClC,QAAMgB,WAAWjB,IAAIkB,IAArB;AACA,QAAMC,QAAQC,gBAAMC,aAAN,CAAoBJ,QAApB,CAAd;;AAEA,QAAIE,KAAJ,EAAW;AACPlB,YAAIY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AACjBgB,4CAA8BK;AADb,SAArB;AAGA;AACH;;AAED7B,OAAGY,UAAH,CAAc,QAAd,EAAwBoB,SAAxB,CAAkCL,QAAlC,EAA4CZ,IAA5C,CAAiD,kBAAU;AACvDY,iBAASM,GAAT,GAAeC,OAAOC,UAAtB;AACAxB,YAAIH,IAAJ,CAASmB,QAAT;AACH,KAHD,EAGGL,KAHH,CAGS,eAAO;AACZX,YAAIY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AACjBgB,iDAAmCC;AADlB,SAArB;AAGH,KAPD;AAQH,CAnBD;;AAqBAW,qBAAYC,OAAZ,CACI,2BADJ,EACiC,EAAEC,iBAAiB,IAAnB,EADjC,EAC4DvB,IAD5D,CACiE,sBAAc;AAC3Ef,SAAKuC,WAAWvC,EAAX,CAAc,cAAd,CAAL;AACAG,QAAIqC,MAAJ,CAAW,IAAX,EAAiB,YAAW;AACxBC,gBAAQC,GAAR,CAAY,aAAZ;AACH,KAFD;AAGH,CAND,EAMGpB,KANH,CAMS,UAACG,GAAD,EAAS;AACdgB,YAAQC,GAAR,CAAY,oBAAZ,EAAkCjB,GAAlC;AACH,CARD","file":"service.js","sourcesContent":["import bodyParser from 'body-parser';\r\nimport express from 'express';\r\nimport { MongoClient } from 'mongodb';\r\nimport 'babel-polyfill';\r\nimport sourceMapSupport from 'source-map-support';\r\nimport Issue from './issue.js';\r\n\r\nlet db;\r\n\r\nsourceMapSupport.install();\r\n\r\n\r\n\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.get('/api/issues', (req, res) => {\r\n    db.collection('issues').find().toArray().then(issues => {\r\n        const metadata = {\r\n            total_count: issues.length\r\n        };\r\n        res.json({\r\n            _metadata: metadata,\r\n            _records: issues\r\n        });\r\n    }).catch(err => {\r\n        res.status(500).json({\r\n            message: `Internal Service Error ${err}`\r\n        });\r\n    });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n    const newIssue = req.body;\r\n    const valid = Issue.validateIssue(newIssue);\r\n\r\n    if (valid) {\r\n        res.status(422).json({\r\n            message: `Invalid requrest: ${valid}`\r\n        });\r\n        return;\r\n    }\r\n\r\n    db.collection('issues').insertOne(newIssue).then(result => {\r\n        newIssue._id = result.insertedId;\r\n        res.json(newIssue);\r\n    }).catch(err => {\r\n        res.status(500).json({\r\n            message: `Internal Service Error ${err}`\r\n        });\r\n    });\r\n});\r\n\r\nMongoClient.connect(\r\n    'mongodb://localhost:27017', { useNewUrlParser: true }).then(connection => {\r\n    db = connection.db('issuetracker');\r\n    app.listen(3000, function() {\r\n        console.log('start 3000.');\r\n    });\r\n}).catch((err) => {\r\n    console.log('init mongodb error', err);\r\n});"]}